#compdef testoob

###
# Main completion function
###
_testoob() {
	typeset -A _completion_types
	_completion_types=(_files   "FILE"
			   _int     "SECONDS NUM_THREADS NUM_PROCESSES NUM_TIMES"
			   _regex   "REGEX"
			   _pattern "PATTERN"
			  )

	if (( ! $+_args_array )); then
		_args=`$words[0] --help | grep -A3 "^--" | sed 'N; s/^\(\S*\)\n/\1/' | sed 'N; s/^\(.*\)\n\s\s*/\1 /' | sed 's/\(--\w*\), \(-\w\)\(\s\s*.*\)/(\2 \1)\2\3\n(\2 \1)\1\3/' | sed 's/\s\s\s*\(.*\)/[\1]/' | sed 's/=\(.*\)\(\[.*\]\)/=\2:\1:\1/'`
		
		for key ( ${(k)_completion_types} ); do
			for value ( ${(s. .)_completion_types[$key]} ); do
				_args=`echo $_args | sed "s/:$value\$/:$key/"`
			done
		done

		_call_function _call_ret _to_array $_args
		set -A _args_array $_to_array_ret
	fi

	_arguments -s -w $_args_array \
		':Tests file:_files' \
		'*:Test Suites:_test_suites'
}

###
# Completion functions
###
(( $+functions[_test_suites] )) || _test_suites () {
    local _file_name
    _file_name="--"
    typeset -i _idx
    _idx=2
    while [[ $_idx < $CURRENT && $_file_name[1] = "-" ]]; do
        _file_name=$words[$_idx]
        _idx+=1
    done
	_suites=`$words[0] --list $_file_name |& grep "^Module:" |& sed 's/Module: \(\w*\) (.*)/\1/'`
	_call_function _call_ret _to_array $_suites
    typeset -U _suites_array
    _suites_array=$_to_array_ret
    for (( ; _idx < $CURRENT; _idx+=1 )); do
        _suite=$words[$_idx]
        if [[ $_suite[1] != "-" ]]; then
            _suites=`$words[0] --list $_file_name $_suite |& grep "^Module:" |& sed 's/Module: \(\w*\) (.*)/\1/'`
            _call_function _call_ret _to_array $_suites
            if (( $#_to_array_ret )); then
                _suites_array+=($_to_array_ret)
            fi
        fi
    done
	if (( ! $#_suites_array && ! $#words[$CURRENT] )); then
		_message -r "<Suites>"
	fi		
	compadd -- $_suites_array
}

(( $+functions[_regex] )) || _regex () {
	_message -r "<Regular Expression>"
}

(( $+functions[_pattern] )) || _pattern () {
	_message -r "<Pattern>"
}

(( $+functions[_int] )) || _int () {
	_message -r "<Integer>"
}

(( $+functions[_float] )) || _float () {
	_message -r "<Float>"
}

###
# Helper functions
###
_to_array() {
	local _lines
	_lines=$1
	_lines=`echo \`echo $_lines | sed "s/$/;/"\` | sed 's/; /;/g'`
	export _to_array_ret
	set -A _to_array_ret ${(s.;.)_lines}
    typeset -U _to_array_ret
}
