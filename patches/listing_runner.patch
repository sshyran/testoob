Index: src/testoob/running.py
===================================================================
--- src/testoob/running.py	(revision 354)
+++ src/testoob/running.py	(working copy)
@@ -89,6 +89,22 @@
         self._helper.start(self.reporter)
         BaseRunner.done(self)
 
+class ListingRunner(BaseRunner):
+    "Just list the test names, don't run them"
+    def __init__(self):
+        self.class_methods = {}
+
+    def run(self, fixture):
+        "Remember the test fixtures, but don't really run them"
+        class_name = fixture.__class__.__name__
+        self.class_methods.setdefault(class_name, 0)
+        self.class_methods[class_name] += 1
+
+    def done(self):
+        "Print the test methods"
+        for (k, v) in self.class_methods.items():
+            print "%s (%s test methods)" % (k, v)
+
 def run(suite=None, suites=None, **kwargs):
     "Convenience frontend for text_run_suites"
     if suite is None and suites is None:
Index: src/testoob/main.py
===================================================================
--- src/testoob/main.py	(revision 354)
+++ src/testoob/main.py	(working copy)
@@ -26,6 +26,7 @@
     p.add_option("-q", "--quiet",   action="store_true", help="Minimal output")
     p.add_option("-v", "--verbose", action="store_true", help="Verbose output")
     p.add_option("-i", "--immediate", action="store_true", help="Immediate feedback about exceptions")
+    p.add_option("-l", "--list", action="store_true", help="List the classes/methods found")
     p.add_option("--vassert", action="store_true", help="Verbalize the assert calls")
     p.add_option("--regex", help="Filtering regular expression")
     p.add_option("--glob", metavar="PATTERN", help="Filtering glob pattern")
@@ -98,6 +99,10 @@
         from extracting import regex_extractor
         kwargs["test_extractor"] = regex_extractor(options.regex)
 
+    if options.list is not None:
+        from running import ListingRunner
+        kwargs["runner"] = ListingRunner()
+
     if options.glob is not None:
         from extracting import glob_extractor
         kwargs["test_extractor"] = glob_extractor(options.glob)
